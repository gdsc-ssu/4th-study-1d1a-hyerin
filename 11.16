#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

void dfs(int node, vector<vector<int>>& graph, vector<bool>& visited, vector<int>& dfs_result) {
    visited[node] = true;
    dfs_result.push_back(node);
    
    for (int neighbor : graph[node]) {
        if (!visited[neighbor]) {
            dfs(neighbor, graph, visited, dfs_result);
        }
    }
}

void bfs(int start, vector<vector<int>>& graph, vector<int>& bfs_result) {
    vector<bool> visited(graph.size(), false);
    queue<int> q;

    q.push(start);
    visited[start] = true;

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        bfs_result.push_back(current);

        for (int neighbor : graph[current]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

int main() {
    int n, m, v; 
    cin >> n >> m >> v;

    vector<vector<int>> graph(n + 1); 
    for (int i = 0; i < m; i++) {
        int u, w;
        cin >> u >> w;
        graph[u].push_back(w);
        graph[w].push_back(u); 
    }

    for (int i = 1; i <= n; i++) {
        sort(graph[i].begin(), graph[i].end());
    }

    vector<bool> visited(n + 1, false); 
    vector<int> dfs_result;
    vector<int> bfs_result;

    dfs(v, graph, visited, dfs_result);

    bfs(v, graph, bfs_result);

    for (int node : dfs_result) {
        cout << node << " ";
    }
    cout << endl;

    for (int node : bfs_result) {
        cout << node << " ";
    }
    cout << endl;

    return 0;
}
